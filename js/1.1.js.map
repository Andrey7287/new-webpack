{"version":3,"sources":["webpack:///1.1.js","webpack:///./frontend/modules/map.js"],"names":["webpackJsonp","102","module","exports","initMap","map","center","lat","lng","zoom","srcTarget","boundsTarget","google","maps","LatLngBounds","LatLng","Map","document","getElementById","scrollwheel","target","MarkerTarget","OctagonOverlay","bounds","image","this","bounds_","image_","map_","div_","setMap","CustomMarker","el","el_","prototype","OverlayView","onAdd","div","createElement","style","borderStyle","borderWidth","position","img","src","width","height","appendChild","panes","getPanes","overlayLayer","draw","overlayProjection","getProjection","sw","fromLatLngToDivPixel","getSouthWest","ne","getNorthEast","left","x","top","y","onRemove","parentNode","removeChild","event","addDomListener","window"],"mappings":"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","file":"1.1.js?","sourcesContent":["webpackJsonp([1],{\n\n/***/ 102:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar target;\n\t\n\tMarkerTarget.prototype = new google.maps.OverlayView();\n\t\n\tfunction initMap() {\n\t\tvar map,\n\t\t    center = {\n\t\t\tlat: 55.685973,\n\t\t\tlng: 37.339480\n\t\t},\n\t\t    zoom = 15,\n\t\t    srcTarget = '/images/maplogo.png',\n\t\t    boundsTarget = new google.maps.LatLngBounds(new google.maps.LatLng(55.684064, 37.341056), new google.maps.LatLng(55.684789, 37.342386));\n\t\n\t\tmap = new google.maps.Map(document.getElementById('map'), {\n\t\t\tcenter: center,\n\t\t\tscrollwheel: false,\n\t\t\tzoom: zoom\n\t\t});\n\t\n\t\ttarget = new MarkerTarget(boundsTarget, srcTarget, map);\n\t}\n\t\n\t/** @constructor */\n\tfunction OctagonOverlay(bounds, image, map) {\n\t\t// Initialize all properties.\n\t\tthis.bounds_ = bounds;\n\t\tthis.image_ = image;\n\t\tthis.map_ = map;\n\t\t// Define a property to hold the image's div. We'll\n\t\t// actually create this div upon receipt of the onAdd()\n\t\t// method so we'll leave it null for now.\n\t\tthis.div_ = null;\n\t\t// Explicitly call setMap on this overlay.\n\t\tthis.setMap(map);\n\t}\n\t/**\n\t * onAdd is called when the map's panes are ready and the overlay has been\n\t * added to the map.\n\t */\n\tOctagonOverlay.prototype.onAdd = function () {\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.borderStyle = 'none';\n\t\tdiv.style.borderWidth = '0px';\n\t\tdiv.style.position = 'absolute';\n\t\t// Create the img element and attach it to the div.\n\t\tvar img = document.createElement('img');\n\t\timg.src = this.image_;\n\t\timg.style.width = '100%';\n\t\timg.style.height = '100%';\n\t\timg.style.position = 'absolute';\n\t\tdiv.appendChild(img);\n\t\tthis.div_ = div;\n\t\t// Add the element to the \"overlayLayer\" pane.\n\t\tvar panes = this.getPanes();\n\t\tpanes.overlayLayer.appendChild(div);\n\t};\n\tOctagonOverlay.prototype.draw = function () {\n\t\t// We use the south-west and north-east\n\t\t// coordinates of the overlay to peg it to the correct position and size.\n\t\t// To do this, we need to retrieve the projection from the overlay.\n\t\tvar overlayProjection = this.getProjection();\n\t\t// Retrieve the south-west and north-east coordinates of this overlay\n\t\t// in LatLngs and convert them to pixel coordinates.\n\t\t// We'll use these coordinates to resize the div.\n\t\tvar sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n\t\tvar ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\t\t// Resize the image's div to fit the indicated dimensions.\n\t\tvar div = this.div_;\n\t\tdiv.style.left = sw.x + 'px';\n\t\tdiv.style.top = ne.y + 'px';\n\t\tdiv.style.width = ne.x - sw.x + 'px';\n\t\tdiv.style.height = sw.y - ne.y + 'px';\n\t};\n\t// The onRemove() method will be called automatically from the API if\n\t// we ever set the overlay's map property to 'null'.\n\tOctagonOverlay.prototype.onRemove = function () {\n\t\tthis.div_.parentNode.removeChild(this.div_);\n\t\tthis.div_ = null;\n\t};\n\t\n\t/** @constructor */\n\tfunction CustomMarker(bounds, el, map) {\n\t\t// Initialize all properties.\n\t\tthis.bounds_ = bounds;\n\t\tthis.el_ = el;\n\t\tthis.map_ = map;\n\t\t// Define a property to hold the image's div. We'll\n\t\t// actually create this div upon receipt of the onAdd()\n\t\t// method so we'll leave it null for now.\n\t\tthis.div_ = null;\n\t\t// Explicitly call setMap on this overlay.\n\t\tthis.setMap(map);\n\t}\n\t/**\n\t * onAdd is called when the map's panes are ready and the overlay has been\n\t * added to the map.\n\t */\n\tCustomMarker.prototype.onAdd = function () {\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.borderStyle = 'none';\n\t\tdiv.style.borderWidth = '0px';\n\t\tdiv.style.position = 'absolute';\n\t\t// Create the img element and attach it to the div.\n\t\tvar el = this.el_;\n\t\tel.style.width = '100%';\n\t\tel.style.height = '100%';\n\t\tel.style.position = 'absolute';\n\t\tdiv.appendChild(el);\n\t\tthis.div_ = div;\n\t\t// Add the element to the \"overlayLayer\" pane.\n\t\tvar panes = this.getPanes();\n\t\tpanes.overlayLayer.appendChild(div);\n\t};\n\tCustomMarker.prototype.draw = function () {\n\t\t// We use the south-west and north-east\n\t\t// coordinates of the overlay to peg it to the correct position and size.\n\t\t// To do this, we need to retrieve the projection from the overlay.\n\t\tvar overlayProjection = this.getProjection();\n\t\t// Retrieve the south-west and north-east coordinates of this overlay\n\t\t// in LatLngs and convert them to pixel coordinates.\n\t\t// We'll use these coordinates to resize the div.\n\t\tvar sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n\t\tvar ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\t\t// Resize the image's div to fit the indicated dimensions.\n\t\tvar div = this.div_;\n\t\tdiv.style.left = sw.x + 'px';\n\t\tdiv.style.top = ne.y + 'px';\n\t\tdiv.style.width = ne.x - sw.x + 'px';\n\t\tdiv.style.height = sw.y - ne.y + 'px';\n\t};\n\t// The onRemove() method will be called automatically from the API if\n\t// we ever set the overlay's map property to 'null'.\n\tCustomMarker.prototype.onRemove = function () {\n\t\tif (!this.div_) {\n\t\t\treturn;\n\t\t};\n\t\tthis.div_.parentNode.removeChild(this.div_);\n\t\tthis.div_ = null;\n\t\tthis.setMap(null);\n\t};\n\t\n\t/** @constructor */\n\tfunction MarkerTarget(bounds, image, map) {\n\t\t// Initialize all properties.\n\t\tthis.bounds_ = bounds;\n\t\tthis.image_ = image;\n\t\tthis.map_ = map;\n\t\t// Define a property to hold the image's div. We'll\n\t\t// actually create this div upon receipt of the onAdd()\n\t\t// method so we'll leave it null for now.\n\t\tthis.div_ = null;\n\t\t// Explicitly call setMap on this overlay.\n\t\tthis.setMap(map);\n\t}\n\t/**\n\t * onAdd is called when the map's panes are ready and the overlay has been\n\t * added to the map.\n\t */\n\tMarkerTarget.prototype.onAdd = function () {\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.borderStyle = 'none';\n\t\tdiv.style.borderWidth = '0px';\n\t\tdiv.style.position = 'absolute';\n\t\t// Create the img element and attach it to the div.\n\t\tvar img = document.createElement('img');\n\t\timg.src = this.image_;\n\t\timg.style.width = '100%';\n\t\timg.style.height = '100%';\n\t\timg.style.position = 'absolute';\n\t\tdiv.appendChild(img);\n\t\tthis.div_ = div;\n\t\t// Add the element to the \"overlayLayer\" pane.\n\t\tvar panes = this.getPanes();\n\t\tpanes.overlayLayer.appendChild(div);\n\t};\n\tMarkerTarget.prototype.draw = function () {\n\t\t// We use the south-west and north-east\n\t\t// coordinates of the overlay to peg it to the correct position and size.\n\t\t// To do this, we need to retrieve the projection from the overlay.\n\t\tvar overlayProjection = this.getProjection();\n\t\t// Retrieve the south-west and north-east coordinates of this overlay\n\t\t// in LatLngs and convert them to pixel coordinates.\n\t\t// We'll use these coordinates to resize the div.\n\t\tvar sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n\t\tvar ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\t\t// Resize the image's div to fit the indicated dimensions.\n\t\tvar div = this.div_;\n\t\tdiv.style.left = sw.x + 'px';\n\t\tdiv.style.top = ne.y + 'px';\n\t\tdiv.style.width = ne.x - sw.x + 'px';\n\t\tdiv.style.height = sw.y - ne.y + 'px';\n\t};\n\t// The onRemove() method will be called automatically from the API if\n\t// we ever set the overlay's map property to 'null'.\n\tMarkerTarget.prototype.onRemove = function () {\n\t\tthis.div_.parentNode.removeChild(this.div_);\n\t\tthis.div_ = null;\n\t};\n\t\n\t//export default initMap;\n\tgoogle.maps.event.addDomListener(window, 'load', initMap);\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 1.1.js?","\nvar target;\n\nMarkerTarget.prototype = new google.maps.OverlayView();\n\n\nfunction initMap() {\n\tvar map,\n\t\t\tcenter = {\n\t\t\t\tlat: 55.685973,\n\t\t\t\tlng: 37.339480\n\t\t\t},\n\t\t\tzoom = 15,\n\t\t\tsrcTarget = '/images/maplogo.png',\n\t\t\tboundsTarget = new google.maps.LatLngBounds(new google.maps.LatLng(55.684064, 37.341056),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew google.maps.LatLng(55.684789, 37.342386));\n\n\tmap = new google.maps.Map(document.getElementById('map'), {\n\t\tcenter: center,\n\t\tscrollwheel: false,\n\t\tzoom: zoom\n\t});\n\n\ttarget = new MarkerTarget(boundsTarget, srcTarget, map);\n\n}\n\n/** @constructor */\nfunction OctagonOverlay(bounds, image, map) {\n\t// Initialize all properties.\n\tthis.bounds_ = bounds;\n\tthis.image_ = image;\n\tthis.map_ = map;\n\t// Define a property to hold the image's div. We'll\n\t// actually create this div upon receipt of the onAdd()\n\t// method so we'll leave it null for now.\n\tthis.div_ = null;\n\t// Explicitly call setMap on this overlay.\n\tthis.setMap(map);\n}\n/**\n * onAdd is called when the map's panes are ready and the overlay has been\n * added to the map.\n */\nOctagonOverlay.prototype.onAdd = function () {\n\tvar div = document.createElement('div');\n\tdiv.style.borderStyle = 'none';\n\tdiv.style.borderWidth = '0px';\n\tdiv.style.position = 'absolute';\n\t// Create the img element and attach it to the div.\n\tvar img = document.createElement('img');\n\timg.src = this.image_;\n\timg.style.width = '100%';\n\timg.style.height = '100%';\n\timg.style.position = 'absolute';\n\tdiv.appendChild(img);\n\tthis.div_ = div;\n\t// Add the element to the \"overlayLayer\" pane.\n\tvar panes = this.getPanes();\n\tpanes.overlayLayer.appendChild(div);\n};\nOctagonOverlay.prototype.draw = function () {\n\t// We use the south-west and north-east\n\t// coordinates of the overlay to peg it to the correct position and size.\n\t// To do this, we need to retrieve the projection from the overlay.\n\tvar overlayProjection = this.getProjection();\n\t// Retrieve the south-west and north-east coordinates of this overlay\n\t// in LatLngs and convert them to pixel coordinates.\n\t// We'll use these coordinates to resize the div.\n\tvar sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n\tvar ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\t// Resize the image's div to fit the indicated dimensions.\n\tvar div = this.div_;\n\tdiv.style.left = sw.x + 'px';\n\tdiv.style.top = ne.y + 'px';\n\tdiv.style.width = (ne.x - sw.x) + 'px';\n\tdiv.style.height = (sw.y - ne.y) + 'px';\n};\n// The onRemove() method will be called automatically from the API if\n// we ever set the overlay's map property to 'null'.\nOctagonOverlay.prototype.onRemove = function () {\n\tthis.div_.parentNode.removeChild(this.div_);\n\tthis.div_ = null;\n};\n\n\n\n\n\n\n\n\n/** @constructor */\nfunction CustomMarker(bounds, el, map) {\n\t// Initialize all properties.\n\tthis.bounds_ = bounds;\n\tthis.el_ = el;\n\tthis.map_ = map;\n\t// Define a property to hold the image's div. We'll\n\t// actually create this div upon receipt of the onAdd()\n\t// method so we'll leave it null for now.\n\tthis.div_ = null;\n\t// Explicitly call setMap on this overlay.\n\tthis.setMap(map);\n}\n/**\n * onAdd is called when the map's panes are ready and the overlay has been\n * added to the map.\n */\nCustomMarker.prototype.onAdd = function () {\n\tvar div = document.createElement('div');\n\tdiv.style.borderStyle = 'none';\n\tdiv.style.borderWidth = '0px';\n\tdiv.style.position = 'absolute';\n\t// Create the img element and attach it to the div.\n\tvar el = this.el_;\n\tel.style.width = '100%';\n\tel.style.height = '100%';\n\tel.style.position = 'absolute';\n\tdiv.appendChild(el);\n\tthis.div_ = div;\n\t// Add the element to the \"overlayLayer\" pane.\n\tvar panes = this.getPanes();\n\tpanes.overlayLayer.appendChild(div);\n};\nCustomMarker.prototype.draw = function () {\n\t// We use the south-west and north-east\n\t// coordinates of the overlay to peg it to the correct position and size.\n\t// To do this, we need to retrieve the projection from the overlay.\n\tvar overlayProjection = this.getProjection();\n\t// Retrieve the south-west and north-east coordinates of this overlay\n\t// in LatLngs and convert them to pixel coordinates.\n\t// We'll use these coordinates to resize the div.\n\tvar sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n\tvar ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\t// Resize the image's div to fit the indicated dimensions.\n\tvar div = this.div_;\n\tdiv.style.left = sw.x + 'px';\n\tdiv.style.top = ne.y + 'px';\n\tdiv.style.width = (ne.x - sw.x) + 'px';\n\tdiv.style.height = (sw.y - ne.y) + 'px';\n};\n// The onRemove() method will be called automatically from the API if\n// we ever set the overlay's map property to 'null'.\nCustomMarker.prototype.onRemove = function () {\n\tif ( !this.div_ ) { return };\n\tthis.div_.parentNode.removeChild(this.div_);\n\tthis.div_ = null;\n\tthis.setMap(null);\n};\n\n\n\n\n/** @constructor */\nfunction MarkerTarget(bounds, image, map) {\n\t// Initialize all properties.\n\tthis.bounds_ = bounds;\n\tthis.image_ = image;\n\tthis.map_ = map;\n\t// Define a property to hold the image's div. We'll\n\t// actually create this div upon receipt of the onAdd()\n\t// method so we'll leave it null for now.\n\tthis.div_ = null;\n\t// Explicitly call setMap on this overlay.\n\tthis.setMap(map);\n}\n/**\n * onAdd is called when the map's panes are ready and the overlay has been\n * added to the map.\n */\nMarkerTarget.prototype.onAdd = function () {\n\tvar div = document.createElement('div');\n\tdiv.style.borderStyle = 'none';\n\tdiv.style.borderWidth = '0px';\n\tdiv.style.position = 'absolute';\n\t// Create the img element and attach it to the div.\n\tvar img = document.createElement('img');\n\timg.src = this.image_;\n\timg.style.width = '100%';\n\timg.style.height = '100%';\n\timg.style.position = 'absolute';\n\tdiv.appendChild(img);\n\tthis.div_ = div;\n\t// Add the element to the \"overlayLayer\" pane.\n\tvar panes = this.getPanes();\n\tpanes.overlayLayer.appendChild(div);\n};\nMarkerTarget.prototype.draw = function () {\n\t// We use the south-west and north-east\n\t// coordinates of the overlay to peg it to the correct position and size.\n\t// To do this, we need to retrieve the projection from the overlay.\n\tvar overlayProjection = this.getProjection();\n\t// Retrieve the south-west and north-east coordinates of this overlay\n\t// in LatLngs and convert them to pixel coordinates.\n\t// We'll use these coordinates to resize the div.\n\tvar sw = overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());\n\tvar ne = overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());\n\t// Resize the image's div to fit the indicated dimensions.\n\tvar div = this.div_;\n\tdiv.style.left = sw.x + 'px';\n\tdiv.style.top = ne.y + 'px';\n\tdiv.style.width = (ne.x - sw.x) + 'px';\n\tdiv.style.height = (sw.y - ne.y) + 'px';\n};\n// The onRemove() method will be called automatically from the API if\n// we ever set the overlay's map property to 'null'.\nMarkerTarget.prototype.onRemove = function () {\n\tthis.div_.parentNode.removeChild(this.div_);\n\tthis.div_ = null;\n};\n\n\n//export default initMap;\ngoogle.maps.event.addDomListener(window, 'load', initMap);\n\n\n\n// WEBPACK FOOTER //\n// ./frontend/modules/map.js"],"sourceRoot":""}